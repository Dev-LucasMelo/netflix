{"version":3,"sources":["components/featuremovie.jsx","tmdb.js","components/MovieRow.jsx","components/header.jsx","App.jsx","index.js"],"names":["item","firstdate","Date","first_air_date","genres","I","push","name","description","overview","length","substring","className","style","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomelist","slug","title","itens","getMovieInfo","movieID","type","info","items","useState","scrollx","setscrollx","onClick","x","Math","round","window","innerWidth","fontSize","listw","results","width","marginLeft","map","key","src","poster_path","alt","black","FeatureData","SetFeatureData","movielist","Setmovielist","BlackHeader","SetBlackHeader","useEffect","LoadALL","Tmdb","list","originals","filter","i","randomchosen","floor","random","chosen","choseninfo","scroll","scrollY","addEventListener","removeEventListener","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73301d13.chunk.js","sourcesContent":["import React from 'react';\r\nimport './featuremovie.css' \r\nimport { BsFillPlayFill} from \"react-icons/bs\";\r\n\r\nexport default ({item}) => {\r\n    \r\n    let firstdate = new Date(item.first_air_date)\r\n\r\n    let genres = []; \r\n\r\n    for( let I in item.genres) {\r\n        genres.push(item.genres[I].name)\r\n    }\r\n\r\n    let description = item.overview\r\n\r\n    if(description.length > 200 ) {\r\n        description = description.substring(0, 200) +\"...\"\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className='featured' style={{\r\n                backgroundSize:\"cover\",\r\n                backgroundPosition: \"center\",\r\n                backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n            }} >\r\n                <div className='featured--vertical'>\r\n                    <div className='featured--horizontal'> \r\n                        <div className='featured--name' >{item.original_name}</div>\r\n                        <div className='featured--infos'>\r\n                            <div className='featured--points'>{item.vote_average} Pontos</div>\r\n                            <div className='featured--year'>{firstdate.getFullYear()}</div>\r\n                            <div className='featured--seasons'>{item.number_of_seasons} Temporada{item.number_of_seasons !== 1 ? \"s\" : \" \"} </div>\r\n                        </div>\r\n                        <div className='featured--description'>{description} </div>\r\n                        <div className='featured-buttons'>\r\n                            <a href={`/watch/${item.id}`} className='featured--watchbutton' > <BsFillPlayFill  className='icon' /> Assistir</a>\r\n                            <a href={`/list/add/${item.id}`} className='featured--addlist' > + Minha Lista</a>\r\n                        </div>\r\n                        <div className='featured--genres'> <strong>Gêneros:</strong>{genres.join(\", \")}</div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </>\r\n    )\r\n}","const API_KEY = \"bbcdebbcc1512ed08ad163b7df833526\";\r\nconst API_BASEURL = \"https://api.themoviedb.org/3\";\r\n\r\n\r\n/* \r\n-originais netflix\r\n-recomendados {trending}\r\n-em alta  (top rated)\r\n-ação\r\n-comedia\r\n-terror\r\n-romance\r\n-documentarios\r\n*/\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASEURL}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    getHomelist : async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais da Netflix',\r\n                itens: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para você',\r\n                itens: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em Alta',\r\n                itens: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY} `)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                itens: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                itens: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                itens: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'romance',\r\n                itens: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                itens: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n        ];\r\n    },\r\n    getMovieInfo: async (movieID,type) => {\r\n        let info = {};\r\n\r\n        if(movieID) {\r\n            switch (type) {\r\n                case \"movie\" :\r\n                    info = await basicFetch(`/movie/${movieID}?language=pt-BR&api_key=${API_KEY} `)\r\n                break;\r\n                case \"tv\":\r\n                    info = await basicFetch(`/tv/${movieID}?language=pt-BR&api_key=${API_KEY} `)\r\n                break;\r\n                default:\r\n                    info = null\r\n                    break\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n}","import React from 'react';\r\nimport './MovieRow.css'\r\nimport { MdNavigateBefore,MdNavigateNext } from \"react-icons/md\";\r\nimport { useState } from 'react';\r\n\r\nexport default ({title,items}) => {\r\n    const [scrollx,setscrollx] = useState(0)\r\n\r\n    const handleleftarrow = ( ) =>{\r\n        let x = scrollx + Math.round(window.innerWidth / 2)\r\n        if(x > 0) {\r\n               x = 0 \r\n        } \r\n        setscrollx(x)\r\n    }\r\n\r\n    const handlerightarrow = () => {\r\n        let x = scrollx - Math.round(window.innerWidth / 2)\r\n        let listw = items.results.length * 150\r\n        if ((window.innerWidth - listw) > x ) {\r\n            x = (window.innerWidth - listw) - 60\r\n        }\r\n        setscrollx(x)\r\n    }\r\n\r\n    return (\r\n        <div className='movieRow'> \r\n          <h2>{title}</h2> \r\n        <div className='movieRow--left' onClick={handleleftarrow}  >\r\n            <MdNavigateBefore style={{fontSize: 50}} /> \r\n        </div>\r\n        <div className='movieRow--right' onClick={handlerightarrow} >\r\n            <MdNavigateNext style={{fontSize: 50}} />\r\n        </div>\r\n\r\n\r\n\r\n          <div className='movieRow--listarea' >\r\n\r\n            <div className='movieRow--list' style={{\r\n                width: items.results.length * 150,\r\n                marginLeft: scrollx\r\n               \r\n               \r\n            }} >\r\n                {items.results.length > 0 && items.results.map((item,key)=> (\r\n                    <div className='movieRow--item' key={key} >\r\n                        <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.name} />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import React from 'react';\r\nimport './header.css'\r\n\r\nexport default ({black}) => {\r\n    return(\r\n        <header className={black ? 'black':  ''} >\r\n            <div className='header--logo' >\r\n                <a href=\"/\">\r\n                    <img src=\"https://logospng.org/download/netflix/logo-netflix-2048.png\" alt=\"\" />\r\n                </a>\r\n            </div>\r\n            <div className='header--user' >\r\n                <a href=\"/\">\r\n                    <img src=\"https://i.pinimg.com/originals/b6/77/cd/b677cd1cde292f261166533d6fe75872.png\" alt=\"\" />\r\n                </a>\r\n            </div>\r\n        </header>\r\n    )\r\n}","//CONFIGS E COMPONENTS\n\nimport React,{useEffect, useState} from 'react';\nimport './App.css';\nimport Featuremovie from './components/featuremovie';\nimport Tmdb from './tmdb';\n\nimport MovieRow from './components/MovieRow';\nimport Header from './components/header';\n\n\n// COD\n\nexport default () => {\n    \n  const[FeatureData,SetFeatureData] = useState(null)\n  const[movielist,Setmovielist] = useState([])\n  const[BlackHeader,SetBlackHeader] = useState(false)\n\n\n  useEffect(() => {\n    const LoadALL = async () => {\n     \n      let list = await Tmdb.getHomelist();\n      Setmovielist(list)\n      \n\n      let originals = list.filter(i=>i.slug === 'originals')\n      let randomchosen = Math.floor(Math.random() * originals[0].itens.results.length -1)\n      let chosen = originals[0].itens.results[randomchosen]\n      let choseninfo = await Tmdb.getMovieInfo(chosen.id, \"tv\")\n     SetFeatureData(choseninfo)\n    }\n    LoadALL();\n  },[] )\n\nuseEffect(()=> {\n  const scroll = () => {\n    if(window.scrollY > 50 ) {\n        SetBlackHeader(true)\n    } else {\n      SetBlackHeader(false)\n    }\n  }\n  window.addEventListener('scroll', scroll)\n\n  return () => {\n    window.removeEventListener('scroll',scroll)\n  }\n},[])\n\n\n    return (\n      <div className='page' >\n          <Header black={BlackHeader} />\n          {\n            FeatureData && <Featuremovie item={FeatureData}/>\n          }\n\n        <section className='lists' >\n          {movielist.map((item, key)=>(\n              <MovieRow key={key} title={item.title} items={item.itens} />\n          ))}     \n        </section>\n        <footer>\n            Direitos de imagem para Netflix <br/>\n            Dados pegos do site themoviedb.org\n\n        </footer>\n\n        {movielist.length <= 0 && \n          <div className='loading' >\n              <img src=\"https://www.rchandru.com/images/portfolio/modals/m-loading.gif\" alt=\"carregando\" />\n          </div>\n        }\n      </div>\n    );\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}